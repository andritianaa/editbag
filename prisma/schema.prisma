datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int             @id @default(autoincrement())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Rating       Rating[]
  Comment      Comment[]
  privileges   Privilege[]
  Favorite     Favorite[]
  Downloaded   Downloaded[]
  Subscription Subscription[]
}

enum Privilege {
  SU
  REDACTOR
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   Int     @id @default(autoincrement())
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//blog
model Post {
  id          Int        @id @default(autoincrement())
  title       String
  subtitle    String
  content     String
  image       String
  subImage    String?
  fileUrl     String
  fileSize    String
  category    String     @default("Photoshop")
  subCategory String     @default("")
  status      PostStatus
  Rating      Rating[]
  Comment     Comment[]

  createdAt    DateTime
  updatedAt    DateTime     @updatedAt
  Favorite     Favorite[]
  Downloaded   Downloaded[]
  categoriesId Int?
}

enum PostStatus {
  draft
  online
  trash
}

model Comment {
  id            Int       @id @default(autoincrement())
  content       String
  postId        Int
  userId        Int
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId      Int?
  parent        Comment?  @relation("ChildComments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childComments Comment[] @relation("ChildComments")
}

model Rating {
  id     Int  @id @default(autoincrement())
  value  Int
  postId Int
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Favorite {
  id     Int  @id @default(autoincrement())
  postId Int
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Downloaded {
  id     Int  @id @default(autoincrement())
  postId Int
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Categories {
  id   Int    @id @default(autoincrement())
  name String
}

model SubCategories {
  id   Int    @id @default(autoincrement())
  name String
}

model Plan {
  id                 String         @unique
  productId          Int
  productName        String?
  variantId          Int            @unique
  name               String
  description        String?
  price              String
  isUsageBased       Boolean        @default(false)
  interval           String?
  intervalCount      Int?
  trialInterval      String?
  trialIntervalCount Int?
  sort               Int?
  Subscription       Subscription[]
}

model WebhookEvent {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  eventName       String
  processed       Boolean  @default(false)
  body            Json
  processingError String?
}

model Subscription {
  id                 Int     @id @default(autoincrement())
  lemonSqueezyId     String  @unique
  orderId            Int
  name               String
  email              String
  status             String
  statusFormatted    String
  renewsAt           String?
  endsAt             String?
  trialEndsAt        String?
  price              String
  isUsageBased       Boolean @default(false)
  isPaused           Boolean @default(false)
  subscriptionItemId Int? // Assuming serial should be an optional integer
  userId             Int
  planId             String

  user User @relation(fields: [userId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])

  @@map("subscription")
}
