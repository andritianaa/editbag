generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             Int       @id @default(autoincrement())
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    hashedPassword String?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    conversations Conversation[] @relation("UserConversations")
    seenMessages  Message[]      @relation("SeenMessages")

    accounts          Account[]
    messages          Message[]
    UserConversations UserConversations[]
    SeenMessages      SeenMessages[]
}

model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Conversation {
    id            Int      @id @default(autoincrement())
    createdAt     DateTime @default(now())
    lastMessageAt DateTime @default(now())
    name          String?
    isGroup       Boolean?

    messages          Message[]
    users             User[]              @relation("UserConversations")
    UserConversations UserConversations[]
}

model Message {
    id        Int       @id @default(autoincrement())
    body      String?
    image     String?
    createdAt DateTime? @default(now())

    seen User[] @relation("SeenMessages")

    conversationId Int
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    senderId     Int
    sender       User           @relation(fields: [senderId], references: [id], onDelete: Cascade)
    SeenMessages SeenMessages[]
}

// Relation tables for many-to-many relationships
model UserConversations {
    user           User         @relation(fields: [userId], references: [id])
    userId         Int
    conversation   Conversation @relation(fields: [conversationId], references: [id])
    conversationId Int

    @@id([userId, conversationId])
}

model SeenMessages {
    user      User    @relation(fields: [userId], references: [id])
    userId    Int
    message   Message @relation(fields: [messageId], references: [id])
    messageId Int

    @@id([userId, messageId])
}
